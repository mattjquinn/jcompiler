initSidebarItems({"fn":[["LLVMAddAlias",""],["LLVMAddAttributeAtIndex",""],["LLVMAddCallSiteAttribute",""],["LLVMAddCase","Add a case to a `switch` instruction"],["LLVMAddClause","Add a catch or filter clause to a `landingpad` instruction"],["LLVMAddDestination","Add a destination to an `indirectbr` instruction"],["LLVMAddFunction",""],["LLVMAddGlobal",""],["LLVMAddGlobalInAddressSpace",""],["LLVMAddHandler","Add a destination to the catchswitch instruction"],["LLVMAddIncoming",""],["LLVMAddModuleFlag","Add a module-level flag to the module-level flags metadata if it doesn't already exist."],["LLVMAddNamedMetadataOperand",""],["LLVMAddTargetDependentFunctionAttr",""],["LLVMAliasGetAliasee","Retrieve the target value of an alias."],["LLVMAliasSetAliasee","Set the target value of an alias."],["LLVMAlignOf",""],["LLVMAppendBasicBlock",""],["LLVMAppendBasicBlockInContext",""],["LLVMAppendModuleInlineAsm",""],["LLVMArrayType",""],["LLVMBasicBlockAsValue",""],["LLVMBlockAddress",""],["LLVMBuildAShr",""],["LLVMBuildAdd",""],["LLVMBuildAddrSpaceCast",""],["LLVMBuildAggregateRet",""],["LLVMBuildAlloca",""],["LLVMBuildAnd",""],["LLVMBuildArrayAlloca",""],["LLVMBuildArrayMalloc",""],["LLVMBuildAtomicCmpXchg",""],["LLVMBuildAtomicRMW",""],["LLVMBuildBinOp",""],["LLVMBuildBitCast",""],["LLVMBuildBr",""],["LLVMBuildCall",""],["LLVMBuildCast",""],["LLVMBuildCatchPad",""],["LLVMBuildCatchRet",""],["LLVMBuildCatchSwitch",""],["LLVMBuildCleanupPad",""],["LLVMBuildCleanupRet",""],["LLVMBuildCondBr",""],["LLVMBuildExactSDiv",""],["LLVMBuildExactUDiv",""],["LLVMBuildExtractElement",""],["LLVMBuildExtractValue",""],["LLVMBuildFAdd",""],["LLVMBuildFCmp",""],["LLVMBuildFDiv",""],["LLVMBuildFMul",""],["LLVMBuildFNeg",""],["LLVMBuildFPCast",""],["LLVMBuildFPExt",""],["LLVMBuildFPToSI",""],["LLVMBuildFPToUI",""],["LLVMBuildFPTrunc",""],["LLVMBuildFRem",""],["LLVMBuildFSub",""],["LLVMBuildFence",""],["LLVMBuildFree",""],["LLVMBuildGEP",""],["LLVMBuildGlobalString",""],["LLVMBuildGlobalStringPtr",""],["LLVMBuildICmp",""],["LLVMBuildInBoundsGEP",""],["LLVMBuildIndirectBr",""],["LLVMBuildInsertElement",""],["LLVMBuildInsertValue",""],["LLVMBuildIntCast",""],["LLVMBuildIntToPtr",""],["LLVMBuildInvoke",""],["LLVMBuildIsNotNull",""],["LLVMBuildIsNull",""],["LLVMBuildLShr",""],["LLVMBuildLandingPad",""],["LLVMBuildLoad",""],["LLVMBuildMalloc",""],["LLVMBuildMul",""],["LLVMBuildNSWAdd",""],["LLVMBuildNSWMul",""],["LLVMBuildNSWNeg",""],["LLVMBuildNSWSub",""],["LLVMBuildNUWAdd",""],["LLVMBuildNUWMul",""],["LLVMBuildNUWNeg",""],["LLVMBuildNUWSub",""],["LLVMBuildNeg",""],["LLVMBuildNot",""],["LLVMBuildOr",""],["LLVMBuildPhi",""],["LLVMBuildPointerCast",""],["LLVMBuildPtrDiff",""],["LLVMBuildPtrToInt",""],["LLVMBuildResume",""],["LLVMBuildRet",""],["LLVMBuildRetVoid",""],["LLVMBuildSDiv",""],["LLVMBuildSExt",""],["LLVMBuildSExtOrBitCast",""],["LLVMBuildSIToFP",""],["LLVMBuildSRem",""],["LLVMBuildSelect",""],["LLVMBuildShl",""],["LLVMBuildShuffleVector",""],["LLVMBuildStore",""],["LLVMBuildStructGEP",""],["LLVMBuildSub",""],["LLVMBuildSwitch",""],["LLVMBuildTrunc",""],["LLVMBuildTruncOrBitCast",""],["LLVMBuildUDiv",""],["LLVMBuildUIToFP",""],["LLVMBuildURem",""],["LLVMBuildUnreachable",""],["LLVMBuildVAArg",""],["LLVMBuildXor",""],["LLVMBuildZExt",""],["LLVMBuildZExtOrBitCast",""],["LLVMClearInsertionPosition",""],["LLVMCloneModule",""],["LLVMConstAShr",""],["LLVMConstAdd",""],["LLVMConstAddrSpaceCast",""],["LLVMConstAllOnes",""],["LLVMConstAnd",""],["LLVMConstArray",""],["LLVMConstBitCast",""],["LLVMConstExactSDiv",""],["LLVMConstExactUDiv",""],["LLVMConstExtractElement",""],["LLVMConstExtractValue",""],["LLVMConstFAdd",""],["LLVMConstFCmp",""],["LLVMConstFDiv",""],["LLVMConstFMul",""],["LLVMConstFNeg",""],["LLVMConstFPCast",""],["LLVMConstFPExt",""],["LLVMConstFPToSI",""],["LLVMConstFPToUI",""],["LLVMConstFPTrunc",""],["LLVMConstFRem",""],["LLVMConstFSub",""],["LLVMConstGEP",""],["LLVMConstICmp",""],["LLVMConstInBoundsGEP",""],["LLVMConstInlineAsm",""],["LLVMConstInsertElement",""],["LLVMConstInsertValue",""],["LLVMConstInt",""],["LLVMConstIntCast",""],["LLVMConstIntGetSExtValue",""],["LLVMConstIntGetZExtValue",""],["LLVMConstIntOfArbitraryPrecision",""],["LLVMConstIntOfString",""],["LLVMConstIntOfStringAndSize",""],["LLVMConstIntToPtr",""],["LLVMConstLShr",""],["LLVMConstMul",""],["LLVMConstNSWAdd",""],["LLVMConstNSWMul",""],["LLVMConstNSWNeg",""],["LLVMConstNSWSub",""],["LLVMConstNUWAdd",""],["LLVMConstNUWMul",""],["LLVMConstNUWNeg",""],["LLVMConstNUWSub",""],["LLVMConstNamedStruct",""],["LLVMConstNeg",""],["LLVMConstNot",""],["LLVMConstNull",""],["LLVMConstOr",""],["LLVMConstPointerCast",""],["LLVMConstPointerNull",""],["LLVMConstPtrToInt",""],["LLVMConstReal",""],["LLVMConstRealGetDouble",""],["LLVMConstRealOfString",""],["LLVMConstRealOfStringAndSize",""],["LLVMConstSDiv",""],["LLVMConstSExt",""],["LLVMConstSExtOrBitCast",""],["LLVMConstSIToFP",""],["LLVMConstSRem",""],["LLVMConstSelect",""],["LLVMConstShl",""],["LLVMConstShuffleVector",""],["LLVMConstString",""],["LLVMConstStringInContext",""],["LLVMConstStruct",""],["LLVMConstStructInContext",""],["LLVMConstSub",""],["LLVMConstTrunc",""],["LLVMConstTruncOrBitCast",""],["LLVMConstUDiv",""],["LLVMConstUIToFP",""],["LLVMConstURem",""],["LLVMConstVector",""],["LLVMConstXor",""],["LLVMConstZExt",""],["LLVMConstZExtOrBitCast",""],["LLVMContextCreate",""],["LLVMContextDispose",""],["LLVMContextGetDiagnosticContext","Get the diagnostic context of this context."],["LLVMContextGetDiagnosticHandler","Get the diagnostic handler of this context."],["LLVMContextSetDiagnosticHandler",""],["LLVMContextSetYieldCallback",""],["LLVMCopyModuleFlagsMetadata","Returns the module flags as an array of flag-key-value triples.  The caller is responsible for freeing this array by calling LLVMDisposeModuleFlagsMetadata."],["LLVMCountBasicBlocks",""],["LLVMCountIncoming",""],["LLVMCountParamTypes",""],["LLVMCountParams",""],["LLVMCountStructElementTypes",""],["LLVMCreateBuilder",""],["LLVMCreateBuilderInContext",""],["LLVMCreateEnumAttribute","Create an enum attribute."],["LLVMCreateFunctionPassManager",""],["LLVMCreateFunctionPassManagerForModule",""],["LLVMCreateMemoryBufferWithContentsOfFile",""],["LLVMCreateMemoryBufferWithMemoryRange",""],["LLVMCreateMemoryBufferWithMemoryRangeCopy",""],["LLVMCreateMemoryBufferWithSTDIN",""],["LLVMCreateMessage",""],["LLVMCreateModuleProviderForExistingModule",""],["LLVMCreatePassManager",""],["LLVMCreateStringAttribute","Create a string attribute."],["LLVMDeleteBasicBlock",""],["LLVMDeleteFunction",""],["LLVMDeleteGlobal",""],["LLVMDisposeBuilder",""],["LLVMDisposeMemoryBuffer",""],["LLVMDisposeMessage",""],["LLVMDisposeModule",""],["LLVMDisposeModuleFlagsMetadata","Destroys module flags metadata entries."],["LLVMDisposeModuleProvider",""],["LLVMDisposePassManager",""],["LLVMDoubleType",""],["LLVMDoubleTypeInContext",""],["LLVMDumpModule",""],["LLVMDumpType",""],["LLVMDumpValue",""],["LLVMFP128Type",""],["LLVMFP128TypeInContext",""],["LLVMFinalizeFunctionPassManager",""],["LLVMFloatType",""],["LLVMFloatTypeInContext",""],["LLVMFunctionType",""],["LLVMGetAlignment",""],["LLVMGetAllocatedType",""],["LLVMGetArgOperand","Get the number of funcletpad arguments."],["LLVMGetArrayLength",""],["LLVMGetAsString",""],["LLVMGetAttributeCountAtIndex",""],["LLVMGetAttributesAtIndex",""],["LLVMGetBasicBlockName","Get the string name of a basic block."],["LLVMGetBasicBlockParent",""],["LLVMGetBasicBlockTerminator",""],["LLVMGetBasicBlocks",""],["LLVMGetBufferSize",""],["LLVMGetBufferStart",""],["LLVMGetCallSiteAttributeCount",""],["LLVMGetCallSiteAttributes",""],["LLVMGetCallSiteEnumAttribute",""],["LLVMGetCallSiteStringAttribute",""],["LLVMGetCalledValue","Get a pointer to the function invoked by this instruction."],["LLVMGetClause","Get the value of the clause with the given index on a landingpad instruction."],["LLVMGetCmpXchgFailureOrdering",""],["LLVMGetCmpXchgSuccessOrdering",""],["LLVMGetCondition",""],["LLVMGetConstOpcode",""],["LLVMGetCurrentDebugLocation",""],["LLVMGetDLLStorageClass",""],["LLVMGetDataLayout",""],["LLVMGetDataLayoutStr","Obtain the data layout for a module."],["LLVMGetDiagInfoDescription",""],["LLVMGetDiagInfoSeverity",""],["LLVMGetElementAsConstant",""],["LLVMGetElementType",""],["LLVMGetEntryBasicBlock",""],["LLVMGetEnumAttributeAtIndex",""],["LLVMGetEnumAttributeKind","Get the unique id corresponding to the provided enum attribute."],["LLVMGetEnumAttributeKindForName","Return a unique id given the name of an enum attribute, or 0 if no attribute by that name exists."],["LLVMGetEnumAttributeValue","Get the value of an enum attribute."],["LLVMGetFCmpPredicate",""],["LLVMGetFirstBasicBlock",""],["LLVMGetFirstFunction",""],["LLVMGetFirstGlobal",""],["LLVMGetFirstGlobalAlias","Obtain an iterator to the first GlobalAlias in a Module."],["LLVMGetFirstInstruction",""],["LLVMGetFirstParam",""],["LLVMGetFirstUse",""],["LLVMGetFunctionCallConv",""],["LLVMGetGC",""],["LLVMGetGlobalContext",""],["LLVMGetGlobalParent",""],["LLVMGetGlobalPassRegistry",""],["LLVMGetHandlers","Obtain the basic blocks acting as handlers for a catchswitch instruction."],["LLVMGetICmpPredicate",""],["LLVMGetIncomingBlock",""],["LLVMGetIncomingValue",""],["LLVMGetIndices",""],["LLVMGetInitializer",""],["LLVMGetInlineAsm",""],["LLVMGetInsertBlock",""],["LLVMGetInstructionCallConv",""],["LLVMGetInstructionOpcode",""],["LLVMGetInstructionParent",""],["LLVMGetIntTypeWidth",""],["LLVMGetIntrinsicID","Obtain the ID number from a function instance."],["LLVMGetLastBasicBlock",""],["LLVMGetLastEnumAttributeKind",""],["LLVMGetLastFunction",""],["LLVMGetLastGlobal",""],["LLVMGetLastGlobalAlias","Obtain an iterator to the last GlobalAlias in a Module."],["LLVMGetLastInstruction",""],["LLVMGetLastParam",""],["LLVMGetLinkage",""],["LLVMGetMDKindID",""],["LLVMGetMDKindIDInContext",""],["LLVMGetMDNodeNumOperands",""],["LLVMGetMDNodeOperands",""],["LLVMGetMDString","Obtain the underlying string from a MDString value."],["LLVMGetMetadata",""],["LLVMGetModuleContext",""],["LLVMGetModuleFlag","Add a module-level flag to the module-level flags metadata if it doesn't already exist."],["LLVMGetModuleIdentifier","Get the identifier of a module."],["LLVMGetModuleInlineAsm",""],["LLVMGetNamedFunction",""],["LLVMGetNamedGlobal",""],["LLVMGetNamedGlobalAlias","Obtain a GlobalAlias value from a Module by its name."],["LLVMGetNamedMetadataNumOperands",""],["LLVMGetNamedMetadataOperands",""],["LLVMGetNextBasicBlock",""],["LLVMGetNextFunction",""],["LLVMGetNextGlobal",""],["LLVMGetNextGlobalAlias","Advance a GlobalAlias iterator to the next GlobalAlias."],["LLVMGetNextInstruction",""],["LLVMGetNextParam",""],["LLVMGetNextUse",""],["LLVMGetNormalDest","Return the normal destination basic block of an invoke instruction."],["LLVMGetNumArgOperands",""],["LLVMGetNumClauses","Get the number of clauses on a landingpad instruction."],["LLVMGetNumContainedTypes","Return the number of types in the derived type."],["LLVMGetNumHandlers","Get the number of handlers on the catchswitch instruction"],["LLVMGetNumIndices","Get the number of indices on an ExtractValue, InsertValue or GEP instruction."],["LLVMGetNumOperands",""],["LLVMGetNumSuccessors",""],["LLVMGetOperand",""],["LLVMGetOperandUse",""],["LLVMGetOrdering",""],["LLVMGetParam",""],["LLVMGetParamParent",""],["LLVMGetParamTypes",""],["LLVMGetParams",""],["LLVMGetParentCatchSwitch","Get the parent catchswitch instruction of a catchpad instruction."],["LLVMGetPersonalityFn","Obtain the personality function attached to the function."],["LLVMGetPointerAddressSpace",""],["LLVMGetPreviousBasicBlock",""],["LLVMGetPreviousFunction",""],["LLVMGetPreviousGlobal",""],["LLVMGetPreviousGlobalAlias","Decrement a GlobalAlias iterator to the previous GlobalAlias."],["LLVMGetPreviousInstruction",""],["LLVMGetPreviousParam",""],["LLVMGetReturnType",""],["LLVMGetSection",""],["LLVMGetSourceFileName","Obtain the module's original source file name."],["LLVMGetStringAttributeAtIndex",""],["LLVMGetStringAttributeKind","Get a string attribute's kind."],["LLVMGetStringAttributeValue","Get a string attribute's value."],["LLVMGetStructElementTypes",""],["LLVMGetStructName",""],["LLVMGetSubtypes","Get the subtypes of the given type."],["LLVMGetSuccessor",""],["LLVMGetSwitchDefaultDest",""],["LLVMGetTarget",""],["LLVMGetThreadLocalMode",""],["LLVMGetTypeByName",""],["LLVMGetTypeContext",""],["LLVMGetTypeKind",""],["LLVMGetUndef",""],["LLVMGetUnnamedAddress",""],["LLVMGetUnwindDest","Return the unwind destination basic block."],["LLVMGetUsedValue",""],["LLVMGetUser",""],["LLVMGetValueKind",""],["LLVMGetValueName",""],["LLVMGetValueName2",""],["LLVMGetVectorSize",""],["LLVMGetVisibility",""],["LLVMGetVolatile",""],["LLVMHalfType",""],["LLVMHalfTypeInContext",""],["LLVMHasMetadata",""],["LLVMHasPersonalityFn","Check whether the given function has a personality function."],["LLVMHasUnnamedAddr",""],["LLVMInitializeFunctionPassManager",""],["LLVMInsertBasicBlock",""],["LLVMInsertBasicBlockInContext",""],["LLVMInsertIntoBuilder",""],["LLVMInsertIntoBuilderWithName",""],["LLVMInstructionClone",""],["LLVMInstructionEraseFromParent","Remove the given instruction from its containing building block and delete it."],["LLVMInstructionRemoveFromParent","Remove the given instruction from its containing building block but kept alive."],["LLVMInt128Type",""],["LLVMInt128TypeInContext",""],["LLVMInt16Type",""],["LLVMInt16TypeInContext",""],["LLVMInt1Type",""],["LLVMInt1TypeInContext",""],["LLVMInt32Type",""],["LLVMInt32TypeInContext",""],["LLVMInt64Type",""],["LLVMInt64TypeInContext",""],["LLVMInt8Type",""],["LLVMInt8TypeInContext",""],["LLVMIntType",""],["LLVMIntTypeInContext",""],["LLVMIsAAddrSpaceCastInst",""],["LLVMIsAAllocaInst",""],["LLVMIsAArgument",""],["LLVMIsABasicBlock",""],["LLVMIsABinaryOperator",""],["LLVMIsABitCastInst",""],["LLVMIsABlockAddress",""],["LLVMIsABranchInst",""],["LLVMIsACallInst",""],["LLVMIsACastInst",""],["LLVMIsACatchPadInst",""],["LLVMIsACatchReturnInst",""],["LLVMIsACleanupPadInst",""],["LLVMIsACleanupReturnInst",""],["LLVMIsACmpInst",""],["LLVMIsAConstant",""],["LLVMIsAConstantAggregateZero",""],["LLVMIsAConstantArray",""],["LLVMIsAConstantDataArray",""],["LLVMIsAConstantDataSequential",""],["LLVMIsAConstantDataVector",""],["LLVMIsAConstantExpr",""],["LLVMIsAConstantFP",""],["LLVMIsAConstantInt",""],["LLVMIsAConstantPointerNull",""],["LLVMIsAConstantStruct",""],["LLVMIsAConstantTokenNone",""],["LLVMIsAConstantVector",""],["LLVMIsADbgDeclareInst",""],["LLVMIsADbgInfoIntrinsic",""],["LLVMIsAExtractElementInst",""],["LLVMIsAExtractValueInst",""],["LLVMIsAFCmpInst",""],["LLVMIsAFPExtInst",""],["LLVMIsAFPToSIInst",""],["LLVMIsAFPToUIInst",""],["LLVMIsAFPTruncInst",""],["LLVMIsAFuncletPadInst",""],["LLVMIsAFunction",""],["LLVMIsAGetElementPtrInst",""],["LLVMIsAGlobalAlias",""],["LLVMIsAGlobalObject",""],["LLVMIsAGlobalValue",""],["LLVMIsAGlobalVariable",""],["LLVMIsAICmpInst",""],["LLVMIsAIndirectBrInst",""],["LLVMIsAInlineAsm",""],["LLVMIsAInsertElementInst",""],["LLVMIsAInsertValueInst",""],["LLVMIsAInstruction",""],["LLVMIsAIntToPtrInst",""],["LLVMIsAIntrinsicInst",""],["LLVMIsAInvokeInst",""],["LLVMIsALandingPadInst",""],["LLVMIsALoadInst",""],["LLVMIsAMDNode",""],["LLVMIsAMDString",""],["LLVMIsAMemCpyInst",""],["LLVMIsAMemIntrinsic",""],["LLVMIsAMemMoveInst",""],["LLVMIsAMemSetInst",""],["LLVMIsAPHINode",""],["LLVMIsAPtrToIntInst",""],["LLVMIsAResumeInst",""],["LLVMIsAReturnInst",""],["LLVMIsASExtInst",""],["LLVMIsASIToFPInst",""],["LLVMIsASelectInst",""],["LLVMIsAShuffleVectorInst",""],["LLVMIsAStoreInst",""],["LLVMIsASwitchInst",""],["LLVMIsATerminatorInst",""],["LLVMIsATruncInst",""],["LLVMIsAUIToFPInst",""],["LLVMIsAUnaryInstruction",""],["LLVMIsAUndefValue",""],["LLVMIsAUnreachableInst",""],["LLVMIsAUser",""],["LLVMIsAVAArgInst",""],["LLVMIsAZExtInst",""],["LLVMIsAtomicSinglethread",""],["LLVMIsCleanup","Get the cleanup flag in a landingpad instruction."],["LLVMIsConditional",""],["LLVMIsConstant","Determine whether the specified value instance is constant."],["LLVMIsConstantString",""],["LLVMIsDeclaration",""],["LLVMIsEnumAttribute",""],["LLVMIsExternallyInitialized",""],["LLVMIsFunctionVarArg",""],["LLVMIsGlobalConstant",""],["LLVMIsInBounds",""],["LLVMIsMultithreaded",""],["LLVMIsNull",""],["LLVMIsOpaqueStruct",""],["LLVMIsPackedStruct","Determine whether a structure is packed."],["LLVMIsStringAttribute",""],["LLVMIsTailCall","Get whether a call instruction is a tail call."],["LLVMIsThreadLocal",""],["LLVMIsUndef",""],["LLVMLabelType",""],["LLVMLabelTypeInContext",""],["LLVMMDNode",""],["LLVMMDNodeInContext",""],["LLVMMDString",""],["LLVMMDStringInContext",""],["LLVMMetadataAsValue","Obtain Metadata as a Value."],["LLVMMetadataTypeInContext",""],["LLVMModuleCreateWithName",""],["LLVMModuleCreateWithNameInContext",""],["LLVMModuleFlagEntriesGetFlagBehavior","Returns the flag behavior for a module flag entry at a specific index."],["LLVMModuleFlagEntriesGetKey","Returns the key for a module flag entry at a specific index."],["LLVMModuleFlagEntriesGetMetadata","Returns the metadata for a module flag entry at a specific index."],["LLVMMoveBasicBlockAfter",""],["LLVMMoveBasicBlockBefore",""],["LLVMPPCFP128Type",""],["LLVMPPCFP128TypeInContext",""],["LLVMPointerType",""],["LLVMPositionBuilder",""],["LLVMPositionBuilderAtEnd",""],["LLVMPositionBuilderBefore",""],["LLVMPrintModuleToFile",""],["LLVMPrintModuleToString",""],["LLVMPrintTypeToString",""],["LLVMPrintValueToString",""],["LLVMRemoveBasicBlockFromParent",""],["LLVMRemoveCallSiteEnumAttribute",""],["LLVMRemoveCallSiteStringAttribute",""],["LLVMRemoveEnumAttributeAtIndex",""],["LLVMRemoveStringAttributeAtIndex",""],["LLVMReplaceAllUsesWith",""],["LLVMRunFunctionPassManager",""],["LLVMRunPassManager",""],["LLVMSetAlignment",""],["LLVMSetArgOperand","Set a funcletpad argument at the given index."],["LLVMSetAtomicSingleThread",""],["LLVMSetCleanup","Set the cleanup flag in a `landingpad` instruction."],["LLVMSetCmpXchgFailureOrdering",""],["LLVMSetCmpXchgSuccessOrdering",""],["LLVMSetCondition",""],["LLVMSetCurrentDebugLocation",""],["LLVMSetDLLStorageClass",""],["LLVMSetDataLayout",""],["LLVMSetExternallyInitialized",""],["LLVMSetFunctionCallConv",""],["LLVMSetGC",""],["LLVMSetGlobalConstant",""],["LLVMSetInitializer",""],["LLVMSetInstDebugLocation",""],["LLVMSetInstrParamAlignment",""],["LLVMSetInstructionCallConv",""],["LLVMSetIsInBounds","Set the given GEP instruction to be inbounds or not."],["LLVMSetLinkage",""],["LLVMSetMetadata",""],["LLVMSetModuleIdentifier","Set the identifier of a module."],["LLVMSetModuleInlineAsm",""],["LLVMSetModuleInlineAsm2",""],["LLVMSetNormalDest","Set the normal destination basic block."],["LLVMSetOperand",""],["LLVMSetOrdering",""],["LLVMSetParamAlignment",""],["LLVMSetParentCatchSwitch","Set the parent catchswitch instruction of a catchpad instruction. This only works on llvm::CatchPadInst instructions."],["LLVMSetPersonalityFn","Set the personality function attached to the function."],["LLVMSetSection",""],["LLVMSetSourceFileName","Set the original source file name of a module to a string Name with length Len."],["LLVMSetSuccessor",""],["LLVMSetTailCall",""],["LLVMSetTarget",""],["LLVMSetThreadLocal",""],["LLVMSetThreadLocalMode",""],["LLVMSetUnnamedAddr",""],["LLVMSetUnnamedAddress",""],["LLVMSetUnwindDest","Set the unwind destination basic block."],["LLVMSetValueName",""],["LLVMSetValueName2",""],["LLVMSetVisibility",""],["LLVMSetVolatile",""],["LLVMShutdown",""],["LLVMSizeOf",""],["LLVMStartMultithreaded","Deprecated: LLVM threading is configured at compile-time with `LLVM_ENABLE_THREADS`"],["LLVMStopMultithreaded","Deprecated: LLVM threading is configured at compile-time with `LLVM_ENABLE_THREADS`"],["LLVMStructCreateNamed",""],["LLVMStructGetTypeAtIndex","Get the type of the element at the given index in a structure."],["LLVMStructSetBody",""],["LLVMStructType",""],["LLVMStructTypeInContext",""],["LLVMTokenTypeInContext",""],["LLVMTypeIsSized",""],["LLVMTypeOf",""],["LLVMValueAsBasicBlock",""],["LLVMValueAsMetadata","Obtain a Value as Metadata."],["LLVMValueIsBasicBlock",""],["LLVMVectorType",""],["LLVMVoidType",""],["LLVMVoidTypeInContext",""],["LLVMX86FP80Type",""],["LLVMX86FP80TypeInContext",""],["LLVMX86MMXType",""],["LLVMX86MMXTypeInContext",""]]});