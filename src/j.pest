// See https://code.jsoftware.com/wiki/User:Marshall_Lochbaum/Formal_Parser
// for a formal parser description.

program = _{ SOI ~ "\n"* ~ (stmt ~ "\n"+) * ~ stmt? ~ EOI }

stmt = _{ expr }

expr = { insertExpr | assgmtExpr | monadicExpr | dyadicExpr | terms }
monadicExpr = { monadicVerb ~ expr }
dyadicExpr = { (monadicExpr | terms) ~ dyadicVerb ~ expr }

// To think: "/" is a dyad itself, can we write this more concisely?
insertExpr = { dyadicVerb ~ "/" ~ expr }

assgmtExpr = { ident ~ "=:" ~ expr }
terms = { term+ }
term = _{ decimal | integer | ident | "(" ~ expr ~ ")" }

monadicVerb = { ">:" | "*:" | "-" | "%" | "#" | ">." }
dyadicVerb = {   "+" | "*" | "-" | "%" | "<"
               | "=" | ">." | "^" | "|" | "#" | ">" }

// @ means "atomic": no implicit whitespace allowed.
integer = @{ "_"? ~ ASCII_DIGIT+ }
decimal = @{ "_"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

WHITESPACE = _{ " " | "\t" }

// Comments match up to, but not including, the next newline
// or end of file; the end marker must not be matched here
// to ensure we can match it in the "program" rule.
COMMENT = _{ "NB." ~ ( !("\n" | EOI) ~ ANY)* }