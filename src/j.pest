// See https://code.jsoftware.com/wiki/User:Marshall_Lochbaum/Formal_Parser
// for a formal parser description.

program = _{ SOI ~ (stmt ~ "\n") * ~ stmt? ~ EOI }

stmt = _{ expr }

expr = { insertExpr | monadicExpr | dyadicExpr | terms }
monadicExpr = { monadicVerb ~ expr }
dyadicExpr = { (monadicExpr | terms) ~ dyadicVerb ~ expr }
// To think: "/" is a dyad itself, can we write this more concisely?
insertExpr = { dyadicVerb ~ "/" ~ expr }
terms = { term+ }
term = _{ number | "(" ~ expr ~ ")" }

monadicVerb = { ">:" | "*:" | "-" }
dyadicVerb = { "+" | "*" | "-" }

// @ means "atomic": no implicit whitespace allowed.
number = @{ ASCII_DIGIT+ }

WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "NB." ~ (!"\n" ~ ANY)* ~ ("\n" | EOI) }