// See https://code.jsoftware.com/wiki/User:Marshall_Lochbaum/Formal_Parser
// for a formal parser description.

program = _{ SOI ~ "\n"* ~ (stmt ~ "\n"+) * ~ stmt? ~ EOI }

stmt = _{ expr }

expr = { assgmtExpr | monadicExpr | dyadicExpr | string | terms }
monadicExpr = { monadicAction ~ expr }
dyadicExpr = { (monadicExpr | terms) ~ dyadicAction ~ expr }

assgmtExpr = { ident ~ "=:" ~ expr }
terms = { term+ }
term = _{ decimal | integer | ident | "(" ~ expr ~ ")" }

dyadicAction = { verbExpr }
monadicAction = { verbExpr | monadicHook }
verbExpr = { verb ~ adverb* }
// TODO: a monadic hook can be written without parens if it appears e.g. on the RHS of an assignment
// TODO: a monadic hook is formed from a dyadicVerb followed by a monadicVerb
monadicHook = { "(" ~ verb ~ verb ~ ")" }

verb = { ">:" | "*:" | "-" | "%" | "#" | ">." | "," |
          "+" | "*" | "<"  | "=" | "^" | "|" | ">" | "$" }
adverb = { "/" }

// @ means "atomic": no implicit whitespace allowed.
integer = @{ "_"? ~ ASCII_DIGIT+ }
decimal = @{ "_"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
string = @{ "'" ~ ( "''" | (!"'" ~ ANY) )* ~ "'" }

WHITESPACE = _{ " " | "\t" }

// Comments match up to, but not including, the next newline
// or end of file
COMMENT = _{ "NB." ~ ( !"\n" ~ ANY)* }